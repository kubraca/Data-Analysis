# -*- coding: utf-8 -*-
"""hisse senedi 3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1dNbFljWIwU2lFnOq7nFOuj50ojHJA6fM
"""

import pandas as pd
import yfinance as yf
import matplotlib.pyplot as plt
import seaborn as sns

symbols = ["AAPL", "GOOGL", "MSFT"]
start_date = "2020-01-01"
end_date = "2024-11-18"

dataframes = {}

for symbol in symbols:

    df = yf.download(symbol, start=start_date, end=end_date)
    df.reset_index(inplace=True)

    # Multi-level sütunları düzleştirme
    df.columns = [' '.join(col).strip() if isinstance(col, tuple) else col for col in df.columns.values]

    if 'Date' not in df.columns:
        df.rename(columns={"index": "Date"}, inplace=True)

    dataframes[symbol] = df

    print(f"--- {symbol} ---")
    print(df.info())

apple_data = dataframes["AAPL"]
google_data = dataframes["GOOGL"]
microsoft_data = dataframes["MSFT"]

for symbol, data in dataframes.items():
    numeric_columns = data.select_dtypes(include=['float64', 'int64']).columns
    data[numeric_columns] = data[numeric_columns].astype('float')

# Preprocess aşamaları
for symbol, data in dataframes.items():
    print(f"{symbol} Missing Values:\n", data.isnull().sum())
    print(f"{symbol} Describe:\n", data.describe())  # Anormal değer tespiti için istatistikler

# Feature Engineering (Özellik ekleme)
for symbol, data in dataframes.items():

    data['Daily Change'] = data[f'Close {symbol}'].pct_change()
    data['7-day MA'] = data[f'Close {symbol}'].rolling(window=7).mean()
    data['30-day Volatility'] = data[f'Close {symbol}'].rolling(window=30).std()

    print(f"{symbol} için yeni eklenen özellikler:")
    print(data[['Daily Change', '7-day MA', '30-day Volatility']].tail())

from sklearn.preprocessing import MinMaxScaler

scaler = MinMaxScaler()

for symbol, data in dataframes.items():
    close_col = f"Close {symbol}"
    volume_col = f"Volume {symbol}"
    volatility_col = f"30-day Volatility"

    if close_col in data.columns and volume_col in data.columns and volatility_col in data.columns:

        data[[close_col, volume_col, volatility_col]] = scaler.fit_transform(data[[close_col, volume_col, volatility_col]])

        print(f"{symbol} için normalizasyon sonrası veriler:")
        print(data[[close_col, volume_col, volatility_col]].tail())
    else:
        print(f"Uyarı: {symbol} için gereken sütunlar eksik:")
        missing_columns = [col for col in [close_col, volume_col, volatility_col] if col not in data.columns]
        print(f" Eksik sütunlar: {missing_columns}")

for symbol, data in dataframes.items():
    data.columns = data.columns.str.strip()

    if 'Date' not in data.columns:
        print(f"Warning: 'Date' column not found in {symbol} data. Available columns: {data.columns}")
    else:
        data['Date'] = pd.to_datetime(data['Date'])

    data.set_index('Date', inplace=True)

# Korelasyon analizi ve görselleştirme
# Tüm semboller için kapanış fiyatlarını birleştiriyoruz
combined_data = pd.DataFrame()

for symbol, data in dataframes.items():
    combined_data[f"Close {symbol}"] = data[f"Close {symbol}"]

# Korelasyon matrisini hesaplama
correlation_matrix = combined_data.corr()

# Korelasyon ısı haritasını çizme
plt.figure(figsize=(10, 8))
sns.heatmap(correlation_matrix, annot=True, cmap="coolwarm", fmt=".2f", linewidths=0.5)
plt.title("Değişkenler Arası Korelasyon Isı Haritası")
plt.show()

annual_df = pd.DataFrame({
    'Apple Close': dataframes['AAPL'].resample('Y')['Close AAPL'].mean(),
    'Google Close': dataframes['GOOGL'].resample('Y')['Close GOOGL'].mean(),
    'Microsoft Close': dataframes['MSFT'].resample('Y')['Close MSFT'].mean(),
})

plt.figure(figsize=(14, 7))
plt.plot(annual_df.index, annual_df['Apple Close'], marker='o', linestyle='-', label="Apple Close", color="tab:blue")
plt.plot(annual_df.index, annual_df['Google Close'], marker='o', linestyle='-', label="Google Close", color="tab:orange")
plt.plot(annual_df.index, annual_df['Microsoft Close'], marker='o', linestyle='-', label="Microsoft Close", color="tab:green")
plt.title("Apple, Google, and Microsoft Annual Average Closing Prices")
plt.xlabel("Year")
plt.ylabel("Average Price (USD)")
plt.legend()
plt.grid(True)
plt.show()

growth_df = pd.DataFrame()
growth_df['Apple Growth'] = dataframes['AAPL']['Close AAPL'].resample('Y').last().pct_change() * 100
growth_df['Google Growth'] = dataframes['GOOGL']['Close GOOGL'].resample('Y').last().pct_change() * 100
growth_df['Microsoft Growth'] = dataframes['MSFT']['Close MSFT'].resample('Y').last().pct_change() * 100

plt.figure(figsize=(14, 7))
plt.plot(growth_df.index, growth_df['Apple Growth'], marker='x', linestyle='--', label="Apple Growth", color="tab:red")
plt.plot(growth_df.index, growth_df['Google Growth'], marker='x', linestyle='--', label="Google Growth", color="tab:purple")
plt.plot(growth_df.index, growth_df['Microsoft Growth'], marker='x', linestyle='--', label="Microsoft Growth", color="tab:brown")
plt.title("Apple, Google ve Microsoft Yıllık Büyüme Oranları (%)")
plt.xlabel("Yıl")
plt.ylabel("Büyüme Oranı (%)")
plt.legend()
plt.grid(True)
plt.show()

fig, ax1 = plt.subplots(figsize=(14, 7))
ax1.set_xlabel("Year")
ax1.set_ylabel("Average Price (USD)", color="tab:blue")
ax1.plot(annual_df.index, annual_df['Apple Close'], marker='o', linestyle='-', label="Apple", color="tab:blue")
ax1.plot(annual_df.index, annual_df['Google Close'], marker='o', linestyle='-', label="Google", color="tab:orange")
ax1.plot(annual_df.index, annual_df['Microsoft Close'], marker='o', linestyle='-', label="Microsoft", color="tab:green")
ax1.tick_params(axis='y', labelcolor="tab:blue")
ax2 = ax1.twinx()
ax2.set_ylabel("Growth Rate (%)", color="tab:red")
ax2.plot(growth_df.index, growth_df['Apple Growth'], marker='x', linestyle='--', label="Apple Growth", color="tab:red")
ax2.plot(growth_df.index, growth_df['Google Growth'], marker='x', linestyle='--', label="Google Growth", color="tab:purple")
ax2.plot(growth_df.index, growth_df['Microsoft Growth'], marker='x', linestyle='--', label="Microsoft Growth", color="tab:brown")
ax2.tick_params(axis='y', labelcolor="tab:red")
fig.tight_layout()
fig.legend(loc="upper left", bbox_to_anchor=(0.1, 0.9))
plt.title("Apple, Google, and Microsoft Annual Stock Prices and Growth Rates")
plt.grid(True)
plt.show()
